{"version":3,"sources":["theme.js","PageWrapper.js","components/ButtonWithSpacing.js","lib/stateMachine.js","components/ButtonGroup.js","components/LogTable.js","lib/persistence.js","App.js","lib/serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","red","secondary","blue","useStyles","makeStyles","title","flexGrow","aboveAppBar","top","position","backgroundColor","dark","zIndex","appBar","marginTop","PageWrapper","children","exportData","setSubject","resetData","undo","redo","canUndo","canRedo","refreshApp","classes","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","enabledAboveAppBar","matchMedia","matches","ThemeProvider","CssBaseline","Box","height","width","className","AppBar","Toolbar","Typography","variant","IconButton","onClick","color","disabled","event","currentTarget","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","mt","Container","maxWidth","ButtonWithSpacing","m","Button","size","fullWidth","actionStrings","praktiMachine","Machine","initial","states","questionFinished","on","meta","name","newQuestionAsked","teacherStartedReacting","firstStudentRaisedHand","window","prakti","root","padding","spacing","ButtonGroup","currentStateId","currentState","onAction","Paper","mb","component","display","justifyContent","alignItems","flexDirection","Object","keys","map","nextStateId","actionId","actionText","getPossibleNextActions","key","overflowScroll","overflowX","LogTable","log","my","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","entry","hover","role","tabIndex","action","nextState","defaultLog","time","Date","now","cache","getInitialData","result","JSON","parse","localStorage","getItem","App","Math","max","obj","currentId","setId","getNewId","setLog","undoItems","setUndoItems","addToLog","data","newLog","requestAnimationFrame","setItem","stringify","length","lastItem","slice","lastUndoItem","location","reload","confirm","removeItem","a","navigator","share","alert","text","url","newSubject","prompt","transition","value","isLocalhost","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.14e6b99b.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\nimport blue from '@material-ui/core/colors/blue';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const theme = createMuiTheme({\n    palette: {\n        primary: red,\n        secondary: blue,\n    },\n});\n","import React, { useState } from 'react';\nimport { ThemeProvider } from '@material-ui/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport RedoIcon from '@material-ui/icons/Redo';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { theme } from './theme';\n\nconst useStyles = makeStyles({\n    title: {\n        flexGrow: 1,\n    },\n    aboveAppBar: {\n        top: 0,\n        position: 'fixed',\n        backgroundColor: theme.palette.primary.dark,\n        zIndex: theme.zIndex.appBar + 1,\n    },\n    appBar: {\n        marginTop: 20,\n    },\n});\n\nconst PageWrapper = ({\n    children,\n    exportData,\n    setSubject,\n    resetData,\n    undo,\n    redo,\n    canUndo,\n    canRedo,\n    refreshApp,\n}) => {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleMenu = event => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const enabledAboveAppBar = matchMedia('(display-mode: standalone)').matches;\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            {enabledAboveAppBar && <Box height={20} width={1} className={classes.aboveAppBar} />}\n            <AppBar position=\"fixed\" className={enabledAboveAppBar ? classes.appBar : ''}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Prakti\n                    </Typography>\n                    <IconButton onClick={undo} color=\"inherit\" disabled={!canUndo}>\n                        <UndoIcon />\n                    </IconButton>\n                    <IconButton onClick={redo} color=\"inherit\" disabled={!canRedo}>\n                        <RedoIcon />\n                    </IconButton>\n                    <IconButton onClick={handleMenu} color=\"inherit\">\n                        <MoreVertIcon />\n                    </IconButton>\n                    <Menu\n                        id=\"menu-appbar\"\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        keepMounted\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        open={open}\n                        onClose={handleClose}\n                    >\n                        <MenuItem\n                            onClick={() => {\n                                handleClose();\n                                setSubject();\n                            }}\n                        >\n                            Fach wechseln\n                        </MenuItem>\n                        <MenuItem\n                            onClick={() => {\n                                handleClose();\n                                exportData();\n                            }}\n                        >\n                            Exportieren\n                        </MenuItem>\n                        <MenuItem\n                            onClick={() => {\n                                refreshApp();\n                            }}\n                        >\n                            App refreshen\n                        </MenuItem>\n                        <MenuItem\n                            onClick={() => {\n                                handleClose();\n                                resetData();\n                            }}\n                        >\n                            Reset\n                        </MenuItem>\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n            <Box mt={11}>\n                <Container maxWidth=\"sm\">{children}</Container>\n            </Box>\n        </ThemeProvider>\n    );\n};\n\nexport default PageWrapper;\n","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nconst ButtonWithSpacing = ({ children, onClick }) => (\n    <Box m={1} width={1}>\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" fullWidth onClick={onClick}>\n            {children}\n        </Button>\n    </Box>\n);\n\nexport default ButtonWithSpacing;\n","import { Machine } from 'xstate';\n\nconst NEW_QUESTION_ASKED = 'NEW_QUESTION_ASKED';\nconst TEACHER_STARTED_REACTING = 'TEACHER_STARTED_REACTING';\nconst FIRST_STUDENT_RAISED_HAND = 'FIRST_STUDENT_RAISED_HAND';\nconst FIRST_STUDENT_ANSWERED_QUESTION = 'FIRST_STUDENT_ANSWERED_QUESTION';\nconst SOME_STUDENT_ANSWERED_QUESTION = 'SOME_STUDENT_ANSWERED_QUESTION';\nconst TEACHER_MOTIVATED = 'TEACHER_MOTIVATED';\nconst TEACHER_ASKED_NEW_QUESTION = 'TEACHER_POSED_NEW_QUESTION';\nconst TEACHER_SIMPLIFIED_QUESTION = 'TEACHER_SIMPLIFIED_QUESTION';\nconst TEACHER_CANCELED_QUESTION = 'TEACHER_CANCELED_QUESTION';\nconst TEACHER_ANSWERED_QUESTION = 'TEACHER_ANSWERED_QUESTION';\nconst TEACHER_REACTED_UNEXPECTEDLY = 'TEACHER_REACTED_UNEXPECTEDLY';\n\nconst actionStrings = {\n    [NEW_QUESTION_ASKED]: 'Neue Frage gestellt',\n    [TEACHER_STARTED_REACTING]: 'Lehrer reagiert',\n    [FIRST_STUDENT_RAISED_HAND]: '1. Schüler meldet sich',\n    [FIRST_STUDENT_ANSWERED_QUESTION]: '1. Schüler antwortet',\n    [SOME_STUDENT_ANSWERED_QUESTION]: 'n. Schüler antwortet, n > 1',\n    [TEACHER_MOTIVATED]: 'Motiviert Klasse',\n    [TEACHER_ASKED_NEW_QUESTION]: 'Stellt neue Frage',\n    [TEACHER_SIMPLIFIED_QUESTION]: 'Vereinfacht Frage',\n    [TEACHER_CANCELED_QUESTION]: 'Bricht ab',\n    [TEACHER_ANSWERED_QUESTION]: 'Beantwortet selbst',\n    [TEACHER_REACTED_UNEXPECTEDLY]: 'Unerwartete Reaktion',\n};\n\nexport const praktiMachine = Machine({\n    id: 'prakti',\n    initial: 'questionFinished',\n    states: {\n        questionFinished: {\n            on: {\n                [NEW_QUESTION_ASKED]: 'newQuestionAsked',\n            },\n            meta: {\n                name: 'Start',\n            },\n        },\n        newQuestionAsked: {\n            on: {\n                [TEACHER_STARTED_REACTING]: 'teacherStartedReacting',\n                [FIRST_STUDENT_RAISED_HAND]: 'firstStudentRaisedHand',\n            },\n            meta: {\n                name: 'Neue Frage gestellt',\n            },\n        },\n        teacherStartedReacting: {\n            on: {\n                [TEACHER_MOTIVATED]: 'newQuestionAsked',\n                [TEACHER_ASKED_NEW_QUESTION]: 'newQuestionAsked',\n                [TEACHER_SIMPLIFIED_QUESTION]: 'newQuestionAsked',\n                [TEACHER_CANCELED_QUESTION]: 'questionFinished',\n                [TEACHER_ANSWERED_QUESTION]: 'questionFinished',\n                [TEACHER_REACTED_UNEXPECTEDLY]: 'questionFinished',\n            },\n            meta: {\n                name: 'Lehrer reagiert...',\n            },\n        },\n        firstStudentRaisedHand: {\n            on: {\n                [TEACHER_STARTED_REACTING]: 'teacherStartedReacting',\n                [FIRST_STUDENT_ANSWERED_QUESTION]: 'questionFinished',\n                [SOME_STUDENT_ANSWERED_QUESTION]: 'questionFinished',\n            },\n            meta: {\n                name: 'Schüler meldete sich',\n            },\n        },\n    },\n});\n\nexport const getPossibleNextActions = currentStateId =>\n    Object.keys(praktiMachine.states[currentStateId].on).map(nextStateId => ({\n        actionId: nextStateId,\n        actionText: actionStrings[nextStateId],\n    }));\n\nexport const getCurrentStateName = currentStateId => praktiMachine.states[currentStateId].meta.name;\n\nwindow.prakti = praktiMachine;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport ButtonWithSpacing from './ButtonWithSpacing';\n\nimport { getCurrentStateName, getPossibleNextActions } from '../lib/stateMachine';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n        flexGrow: 1,\n    },\n}));\n\nconst ButtonGroup = ({ currentState, onAction }) => {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.root}>\n            <Box mb={1}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    {getCurrentStateName(currentState)}\n                </Typography>\n            </Box>\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                {getPossibleNextActions(currentState).map(({ actionId, actionText }) => (\n                    <ButtonWithSpacing key={actionId} onClick={() => onAction(actionId)}>\n                        {actionText}\n                    </ButtonWithSpacing>\n                ))}\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ButtonGroup;\n","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Box from '@material-ui/core/Box';\n\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n    overflowScroll: {\n        overflowX: 'scroll',\n    },\n});\n\nconst LogTable = ({ log }) => {\n    const classes = useStyles();\n    return (\n        <Box my={2}>\n            <Paper>\n                <Box height={150} className={classes.overflowScroll}>\n                    <Table stickyHeader size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>Action</TableCell>\n                                <TableCell>Next State</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {log.map(entry => (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={entry.id}>\n                                    <TableCell>{entry.action}</TableCell>\n                                    <TableCell>{entry.nextState}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Box>\n            </Paper>\n        </Box>\n    );\n};\n\nexport default LogTable;\n","import { praktiMachine } from './stateMachine';\n\nconst id = 'LOG_STATE';\nexport function persistData(data) {\n    // don't block UI\n    window.requestAnimationFrame(() => {\n        localStorage.setItem(id, JSON.stringify(data));\n    });\n}\n\nexport const defaultLog = [\n    {\n        id: 0,\n        time: Date.now(),\n        currentState: praktiMachine.initial,\n        nextState: praktiMachine.initial,\n        action: 'NONE',\n    },\n];\n\n// this function should only be used to get the state after page refresh\n// use a cache to speed up multiple function calls\nlet cache = null;\nexport function getInitialData() {\n    if (cache) {\n        return cache;\n    }\n\n    const result = JSON.parse(localStorage.getItem(id)) || defaultLog;\n    cache = result;\n    return result;\n}\n\nexport function getPersistedDataAsString() {\n    return localStorage.getItem(id) || '[no-data-available]';\n}\n\nexport function clearPersistedData() {\n    localStorage.removeItem(id);\n}\n","/* eslint-disable no-alert */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport PageWrapper from './PageWrapper';\nimport ButtonGroup from './components/ButtonGroup';\nimport LogTable from './components/LogTable';\n\nimport { praktiMachine } from './lib/stateMachine';\nimport {\n    persistData,\n    getInitialData,\n    clearPersistedData,\n    getPersistedDataAsString,\n    defaultLog,\n} from './lib/persistence';\n\nconst App = () => {\n    const [currentId, setId] = useState(\n        () => Math.max(0, ...getInitialData().map(obj => obj.id)) + 1,\n    );\n    const getNewId = () => {\n        const id = currentId;\n        setId(currentId + 1);\n        return id;\n    };\n\n    const [log, setLog] = useState(() => getInitialData() || defaultLog);\n\n    const [undoItems, setUndoItems] = useState([]);\n    const undo = () => {\n        const [lastItem] = log;\n        setUndoItems([lastItem, ...undoItems]);\n        setLog(log.slice(1));\n    };\n    const redo = () => {\n        const [lastUndoItem] = undoItems;\n        setLog([lastUndoItem, ...log]);\n        setUndoItems(undoItems.slice(1));\n    };\n\n    const addToLog = ({ action, currentState, nextState, meta = null }) => {\n        const newLog = [\n            {\n                id: getNewId(),\n                time: Date.now(),\n                action,\n                currentState,\n                nextState,\n                meta,\n            },\n            ...log,\n        ];\n        setLog(newLog);\n        setUndoItems([]);\n        persistData(newLog);\n    };\n\n    const canRedo = undoItems.length > 0;\n    const canUndo = log.length > 1;\n\n    const [{ nextState: currentState }] = log;\n\n    const onAction = actionId => {\n        const { value: nextState } = praktiMachine.transition(currentState, actionId);\n        addToLog({ action: actionId, currentState, nextState });\n    };\n\n    return (\n        <PageWrapper\n            undo={undo}\n            redo={redo}\n            canUndo={canUndo}\n            canRedo={canRedo}\n            refreshApp={() => window.location.reload(true)}\n            resetData={() => {\n                const shouldReset = window.confirm('Bist du dir sicher?');\n                if (!shouldReset) {\n                    return;\n                }\n\n                clearPersistedData();\n                setLog(defaultLog);\n                setId(1);\n            }}\n            exportData={async () => {\n                if (!window.navigator.share) {\n                    alert('Export wird nur von Mobilgeräten unterstützt');\n                    return;\n                }\n                const text = getPersistedDataAsString();\n                await window.navigator.share({\n                    url: '',\n                    text,\n                    title: 'Prakti Export',\n                });\n\n                alert('Export abgeschlossen');\n            }}\n            setSubject={() => {\n                const newSubject = window.prompt('Neues Fach:');\n                if (!newSubject) {\n                    return;\n                }\n\n                addToLog({\n                    action: 'NEW_SUBJECT',\n                    currentState,\n                    nextState: currentState,\n                    meta: { newSubject },\n                });\n            }}\n        >\n            <Box display=\"flex\" flexDirection=\"column\">\n                <ButtonGroup currentState={currentState} onAction={onAction} />\n                <LogTable log={log} />\n            </Box>\n        </PageWrapper>\n    );\n};\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function registerServiceWorker(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\n\nimport App from './App';\nimport { registerServiceWorker } from './lib/serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}