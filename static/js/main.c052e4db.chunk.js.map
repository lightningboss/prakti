{"version":3,"sources":["PageWrapper.js","components/ButtonWithSpacing.js","lib/stateMachine.js","components/ButtonGroup.js","components/LogTable.js","components/Settings.js","lib/persistence.js","App.js","lib/serviceWorker.js","index.js"],"names":["useStyles","makeStyles","title","flexGrow","PageWrapper","children","onOpenSettings","classes","CssBaseline","AppBar","position","Toolbar","Typography","variant","className","IconButton","onClick","color","Box","mt","Container","maxWidth","ButtonWithSpacing","m","width","Button","size","fullWidth","actionStrings","praktiMachine","Machine","id","initial","states","questionFinished","on","meta","name","newQuestionAsked","teacherStartedReacting","firstStudentRaisedHand","window","prakti","theme","root","padding","spacing","ButtonGroup","currentStateId","currentState","onAction","Paper","mb","component","display","justifyContent","alignItems","flexDirection","Object","keys","map","nextStateId","actionId","actionText","getPossibleNextActions","key","overflowScroll","overflowX","LogTable","log","my","height","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","entry","hover","role","tabIndex","action","Settings","open","handleClose","resetData","exportData","setSubject","Dialog","onClose","fullScreen","DialogTitle","DialogContent","DialogActions","cache","getInitialData","result","JSON","parse","localStorage","getItem","defaultLog","time","Date","now","App","useState","Math","max","obj","currentId","setId","getNewId","shouldOpenSettings","setShouldOpenSettings","closeSettings","lastState","transition","value","setNextState","setLog","addToLog","data","nextState","newLog","requestAnimationFrame","setItem","stringify","confirm","removeItem","prompt","newSubject","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c052e4db.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    title: {\n        flexGrow: 1,\n    },\n});\nconst PageWrapper = ({ children, onOpenSettings }) => {\n    const classes = useStyles();\n    return (\n        <>\n            <CssBaseline />\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Prakti\n                    </Typography>\n                    <IconButton onClick={onOpenSettings} color=\"inherit\">\n                        <MoreVertIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <Box mt={9}>\n                <Container maxWidth=\"sm\">{children}</Container>\n            </Box>\n        </>\n    );\n};\n\nexport default PageWrapper;\n","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nconst ButtonWithSpacing = ({ children, onClick }) => (\n    <Box m={1} width={1}>\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" fullWidth onClick={onClick}>\n            {children}\n        </Button>\n    </Box>\n);\n\nexport default ButtonWithSpacing;\n","import { Machine } from 'xstate';\n\nconst NEW_QUESTION_ASKED = 'NEW_QUESTION_ASKED';\nconst TEACHER_STARTED_REACTING = 'TEACHER_STARTED_REACTING';\nconst FIRST_STUDENT_RAISED_HAND = 'FIRST_STUDENT_RAISED_HAND';\nconst FIRST_STUDENT_ANSWERED_QUESTION = 'FIRST_STUDENT_ANSWERED_QUESTION';\nconst SOME_STUDENT_ANSWERED_QUESTION = 'SOME_STUDENT_ANSWERED_QUESTION';\nconst TEACHER_MOTIVATED = 'TEACHER_MOTIVATED';\nconst TEACHER_ASKED_NEW_QUESTION = 'TEACHER_POSED_NEW_QUESTION';\nconst TEACHER_SIMPLIFIED_QUESTION = 'TEACHER_SIMPLIFIED_QUESTION';\nconst TEACHER_CANCELED_QUESTION = 'TEACHER_CANCELED_QUESTION';\nconst TEACHER_ANSWERED_QUESTION = 'TEACHER_ANSWERED_QUESTION';\nconst TEACHER_REACTED_UNEXPECTEDLY = 'TEACHER_REACTED_UNEXPECTEDLY';\n\nconst actionStrings = {\n    [NEW_QUESTION_ASKED]: 'Neue Frage gestellt',\n    [TEACHER_STARTED_REACTING]: 'Lehrer reagiert',\n    [FIRST_STUDENT_RAISED_HAND]: '1. Schüler meldet sich',\n    [FIRST_STUDENT_ANSWERED_QUESTION]: '1. Schüler antwortet',\n    [SOME_STUDENT_ANSWERED_QUESTION]: 'n. Schüler antwortet, n > 1',\n    [TEACHER_MOTIVATED]: 'Motiviert Klasse',\n    [TEACHER_ASKED_NEW_QUESTION]: 'Stellt neue Frage',\n    [TEACHER_SIMPLIFIED_QUESTION]: 'Vereinfacht Frage',\n    [TEACHER_CANCELED_QUESTION]: 'Bricht ab',\n    [TEACHER_ANSWERED_QUESTION]: 'Beantwortet selbst',\n    [TEACHER_REACTED_UNEXPECTEDLY]: 'Unerwartete Reaktion',\n};\n\nexport const getPossibleNextActions = currentStateId =>\n    Object.keys(praktiMachine.states[currentStateId].on).map(nextStateId => ({\n        actionId: nextStateId,\n        actionText: actionStrings[nextStateId],\n    }));\n\nexport const getCurrentStateName = currentStateId => praktiMachine.states[currentStateId].meta.name;\n\nexport const praktiMachine = Machine({\n    id: 'prakti',\n    initial: 'questionFinished',\n    states: {\n        questionFinished: {\n            on: {\n                [NEW_QUESTION_ASKED]: 'newQuestionAsked',\n            },\n            meta: {\n                name: 'Start',\n            },\n        },\n        newQuestionAsked: {\n            on: {\n                [TEACHER_STARTED_REACTING]: 'teacherStartedReacting',\n                [FIRST_STUDENT_RAISED_HAND]: 'firstStudentRaisedHand',\n            },\n            meta: {\n                name: 'Neue Frage gestellt',\n            },\n        },\n        teacherStartedReacting: {\n            on: {\n                [TEACHER_MOTIVATED]: 'newQuestionAsked',\n                [TEACHER_ASKED_NEW_QUESTION]: 'newQuestionAsked',\n                [TEACHER_SIMPLIFIED_QUESTION]: 'newQuestionAsked',\n                [TEACHER_CANCELED_QUESTION]: 'questionFinished',\n                [TEACHER_ANSWERED_QUESTION]: 'questionFinished',\n                [TEACHER_REACTED_UNEXPECTEDLY]: 'questionFinished',\n            },\n            meta: {\n                name: 'Lehrer reagiert...',\n            },\n        },\n        firstStudentRaisedHand: {\n            on: {\n                [TEACHER_STARTED_REACTING]: 'teacherStartedReacting',\n                [FIRST_STUDENT_ANSWERED_QUESTION]: 'questionFinished',\n                [SOME_STUDENT_ANSWERED_QUESTION]: 'questionFinished',\n            },\n            meta: {\n                name: 'Schüler meldete sich',\n            },\n        },\n    },\n});\n\nwindow.prakti = praktiMachine;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport ButtonWithSpacing from './ButtonWithSpacing';\n\nimport { getCurrentStateName, getPossibleNextActions } from '../lib/stateMachine';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n        flexGrow: 1,\n    },\n}));\n\nconst ButtonGroup = ({ currentState, onAction }) => {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.root}>\n            <Box mb={1}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    {getCurrentStateName(currentState)}\n                </Typography>\n            </Box>\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                {getPossibleNextActions(currentState).map(({ actionId, actionText }) => (\n                    <ButtonWithSpacing key={actionId} onClick={() => onAction(actionId)}>\n                        {actionText}\n                    </ButtonWithSpacing>\n                ))}\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ButtonGroup;\n","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Box from '@material-ui/core/Box';\n\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n    overflowScroll: {\n        overflowX: 'scroll',\n    },\n});\n\nconst LogTable = ({ log }) => {\n    const classes = useStyles();\n    return (\n        <Box my={2}>\n            <Paper>\n                <Box height={150} className={classes.overflowScroll}>\n                    <Table stickyHeader size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>State</TableCell>\n                                <TableCell>Action</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {log.map(entry => (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={entry.id}>\n                                    <TableCell>{entry.currentState}</TableCell>\n                                    <TableCell>{entry.action}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Box>\n            </Paper>\n        </Box>\n    );\n};\n\nexport default LogTable;\n","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport ButtonWithSpacing from './ButtonWithSpacing';\nconst Settings = ({ children, open, handleClose, resetData, exportData, setSubject }) => {\n    return (\n        <Dialog open={open} onClose={handleClose} fullScreen>\n            <DialogTitle id=\"form-dialog-title\">Einstellungen</DialogTitle>\n            <DialogContent>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    flexDirection=\"column\"\n                >\n                    <ButtonWithSpacing onClick={exportData}>Exportieren</ButtonWithSpacing>\n                    <ButtonWithSpacing onClick={setSubject}>Fach wechseln</ButtonWithSpacing>\n                    <ButtonWithSpacing onClick={resetData}>Reset</ButtonWithSpacing>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Settings;\n","const id = 'LOG_STATE';\nexport function persistData(data) {\n    // don't block UI\n    window.requestAnimationFrame(() => {\n        localStorage.setItem(id, JSON.stringify(data));\n    });\n}\n\n// this function should only be used to get the state after page refresh\n// use a cache to speed up multiple function calls\nlet cache = null;\nexport function getInitialData() {\n    if (cache) {\n        return cache;\n    }\n\n    const result = JSON.parse(localStorage.getItem(id)) || [];\n    cache = result;\n    return result;\n}\n\nexport function getPersistedDataAsString() {\n    return localStorage.getItem(id) || '[no-data-available]';\n}\n\nexport function clearPersistedData() {\n    localStorage.removeItem(id);\n}\n","import React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport PageWrapper from './PageWrapper';\nimport ButtonGroup from './components/ButtonGroup';\nimport LogTable from './components/LogTable';\nimport Settings from './components/Settings';\n\nimport { praktiMachine } from './lib/stateMachine';\nimport {\n    persistData,\n    getInitialData,\n    clearPersistedData,\n    getPersistedDataAsString,\n} from './lib/persistence';\n\nconst defaultLog = [\n    {\n        id: 0,\n        time: Date.now(),\n        currentState: praktiMachine.initial,\n        action: 'NONE',\n    },\n];\n\nconst App = () => {\n    const [currentId, setId] = useState(\n        () => Math.max(0, ...getInitialData().map(obj => obj.id)) + 1,\n    );\n    const getNewId = () => {\n        const id = currentId;\n        setId(currentId + 1);\n        return id;\n    };\n\n    const [shouldOpenSettings, setShouldOpenSettings] = useState(false);\n    const openSettings = () => setShouldOpenSettings(true);\n    const closeSettings = () => setShouldOpenSettings(false);\n\n    const [currentState, setNextState] = useState(() => {\n        const lastState = getInitialData()[0];\n        if (lastState) {\n            return praktiMachine.transition(lastState.currentState, lastState.action).value;\n        }\n\n        return praktiMachine.initial;\n    });\n    const [log, setLog] = useState(() => getInitialData() || defaultLog);\n    const addToLog = ({ action, currentState, nextState, meta = null }) => {\n        const newLog = [\n            {\n                id: getNewId(),\n                time: Date.now(),\n                action,\n                currentState,\n                nextState,\n                meta,\n            },\n            ...log,\n        ];\n        setLog(newLog);\n        persistData(newLog);\n    };\n\n    const onAction = actionId => {\n        const { value: nextState } = praktiMachine.transition(currentState, actionId);\n        setNextState(nextState);\n        addToLog({ action: actionId, currentState, nextState });\n    };\n\n    return (\n        <PageWrapper onOpenSettings={openSettings}>\n            <Box display=\"flex\" flexDirection=\"column\">\n                <ButtonGroup currentState={currentState} onAction={onAction} />\n                <LogTable log={log} />\n                <Settings\n                    open={shouldOpenSettings}\n                    handleClose={closeSettings}\n                    resetData={() => {\n                        const shouldReset = window.confirm('Are you sure?');\n                        if (!shouldReset) {\n                            return;\n                        }\n\n                        clearPersistedData();\n                        setNextState(praktiMachine.initial);\n                        setLog(defaultLog);\n                        setId(1);\n                        closeSettings();\n                    }}\n                    exportData={() => {\n                        window.prompt('Copy to clipboard:', getPersistedDataAsString());\n                    }}\n                    setSubject={() => {\n                        const newSubject = window.prompt('Neues Fach:');\n                        addToLog({\n                            action: 'NEW_SUBJECT',\n                            currentState,\n                            nextState: currentState,\n                            meta: { newSubject },\n                        });\n                        closeSettings();\n                    }}\n                />\n            </Box>\n        </PageWrapper>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function registerServiceWorker(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\n\nimport App from './App';\nimport { registerServiceWorker } from './lib/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}