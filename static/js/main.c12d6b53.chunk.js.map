{"version":3,"sources":["PageWrapper.js","components/ButtonWithSpacing.js","lib/stateMachine.js","components/ButtonGroup.js","components/LogTable.js","components/Settings.js","App.js","lib/serviceWorker.js","index.js"],"names":["useStyles","makeStyles","title","flexGrow","PageWrapper","children","onOpenSettings","classes","CssBaseline","AppBar","position","Toolbar","Typography","variant","className","IconButton","onClick","color","Box","mt","m","height","ButtonWithSpacing","width","Button","size","fullWidth","actionStrings","praktiMachine","Machine","id","initial","states","questionFinished","on","meta","name","newQuestionAsked","teacherStartedReacting","firstStudentRaisedHand","window","prakti","theme","root","padding","spacing","ButtonGroup","currentStateId","currentState","onAction","Paper","mb","component","display","justifyContent","alignItems","flexDirection","Object","keys","map","nextStateId","actionId","actionText","getPossibleNextActions","key","overflowScroll","overflowX","LogTable","log","my","p","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","entry","hover","role","tabIndex","action","Settings","open","handleClose","Dialog","onClose","fullScreen","DialogTitle","DialogContent","console","DialogActions","App","useState","shouldOpenSettings","setShouldOpenSettings","setNextState","time","Date","now","setLog","nextState","transition","value","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c12d6b53.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n    title: {\n        flexGrow: 1,\n    },\n});\nconst PageWrapper = ({ children, onOpenSettings }) => {\n    const classes = useStyles();\n    return (\n        <>\n            <CssBaseline />\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Prakti\n                    </Typography>\n                    <IconButton onClick={onOpenSettings} color=\"inherit\">\n                        <MoreVertIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <Box mt={9} m={2} height={1}>\n                {children}\n            </Box>\n        </>\n    );\n};\n\nexport default PageWrapper;\n","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nconst ButtonWithSpacing = ({ children, onClick }) => (\n    <Box m={1} width={1}>\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" fullWidth onClick={onClick}>\n            {children}\n        </Button>\n    </Box>\n);\n\nexport default ButtonWithSpacing;\n","import { Machine } from 'xstate';\n\nconst NEW_QUESTION_ASKED = 'NEW_QUESTION_ASKED';\nconst TEACHER_STARTED_REACTING = 'TEACHER_STARTED_REACTING';\nconst FIRST_STUDENT_RAISED_HAND = 'FIRST_STUDENT_RAISED_HAND';\nconst FIRST_STUDENT_ANSWERED_QUESTION = 'FIRST_STUDENT_ANSWERED_QUESTION';\nconst SOME_STUDENT_ANSWERED_QUESTION = 'SOME_STUDENT_ANSWERED_QUESTION';\nconst TEACHER_MOTIVATED = 'TEACHER_MOTIVATED';\nconst TEACHER_ASKED_NEW_QUESTION = 'TEACHER_POSED_NEW_QUESTION';\nconst TEACHER_SIMPLIFIED_QUESTION = 'TEACHER_SIMPLIFIED_QUESTION';\nconst TEACHER_CANCELED_QUESTION = 'TEACHER_CANCELED_QUESTION';\nconst TEACHER_ANSWERED_QUESTION = 'TEACHER_ANSWERED_QUESTION';\nconst TEACHER_REACTED_UNEXPECTEDLY = 'TEACHER_REACTED_UNEXPECTEDLY';\n\nconst actionStrings = {\n    [NEW_QUESTION_ASKED]: 'Neue Frage gestellt',\n    [TEACHER_STARTED_REACTING]: 'Lehrer reagiert',\n    [FIRST_STUDENT_RAISED_HAND]: '1. Schüler meldet sich',\n    [FIRST_STUDENT_ANSWERED_QUESTION]: '1. Schüler antwortet',\n    [SOME_STUDENT_ANSWERED_QUESTION]: 'n. Schüler antwortet, n > 1',\n    [TEACHER_MOTIVATED]: 'Motiviert Klasse',\n    [TEACHER_ASKED_NEW_QUESTION]: 'Stellt neue Frage',\n    [TEACHER_SIMPLIFIED_QUESTION]: 'Vereinfacht Frage',\n    [TEACHER_CANCELED_QUESTION]: 'Bricht ab',\n    [TEACHER_ANSWERED_QUESTION]: 'Beantwortet selbst',\n    [TEACHER_REACTED_UNEXPECTEDLY]: 'Unerwartete Reaktion',\n};\n\nexport const getPossibleNextActions = currentStateId =>\n    Object.keys(praktiMachine.states[currentStateId].on).map(nextStateId => ({\n        actionId: nextStateId,\n        actionText: actionStrings[nextStateId],\n    }));\n\nexport const getCurrentStateName = currentStateId => praktiMachine.states[currentStateId].meta.name;\n\nexport const praktiMachine = Machine({\n    id: 'prakti',\n    initial: 'questionFinished',\n    states: {\n        questionFinished: {\n            on: {\n                [NEW_QUESTION_ASKED]: 'newQuestionAsked',\n            },\n            meta: {\n                name: 'Start',\n            },\n        },\n        newQuestionAsked: {\n            on: {\n                [TEACHER_STARTED_REACTING]: 'teacherStartedReacting',\n                [FIRST_STUDENT_RAISED_HAND]: 'firstStudentRaisedHand',\n            },\n            meta: {\n                name: 'Neue Frage gestellt',\n            },\n        },\n        teacherStartedReacting: {\n            on: {\n                [TEACHER_MOTIVATED]: 'newQuestionAsked',\n                [TEACHER_ASKED_NEW_QUESTION]: 'newQuestionAsked',\n                [TEACHER_SIMPLIFIED_QUESTION]: 'newQuestionAsked',\n                [TEACHER_CANCELED_QUESTION]: 'questionFinished',\n                [TEACHER_ANSWERED_QUESTION]: 'questionFinished',\n                [TEACHER_REACTED_UNEXPECTEDLY]: 'questionFinished',\n            },\n            meta: {\n                name: 'Lehrer reagiert...',\n            },\n        },\n        firstStudentRaisedHand: {\n            on: {\n                [TEACHER_STARTED_REACTING]: 'teacherStartedReacting',\n                [FIRST_STUDENT_ANSWERED_QUESTION]: 'questionFinished',\n                [SOME_STUDENT_ANSWERED_QUESTION]: 'questionFinished',\n            },\n            meta: {\n                name: 'Schüler meldete sich',\n            },\n        },\n    },\n});\n\nwindow.prakti = praktiMachine;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport ButtonWithSpacing from './ButtonWithSpacing';\n\nimport { getCurrentStateName, getPossibleNextActions } from '../lib/stateMachine';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n        flexGrow: 1,\n    },\n}));\n\nconst ButtonGroup = ({ currentState, onAction }) => {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.root}>\n            <Box mb={1}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    {getCurrentStateName(currentState)}\n                </Typography>\n            </Box>\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                {getPossibleNextActions(currentState).map(({ actionId, actionText }) => (\n                    <ButtonWithSpacing key={actionId} onClick={() => onAction(actionId)}>\n                        {actionText}\n                    </ButtonWithSpacing>\n                ))}\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ButtonGroup;\n","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Box from '@material-ui/core/Box';\n\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n    overflowScroll: {\n        overflowX: 'scroll',\n    },\n});\n\nconst LogTable = ({ log }) => {\n    const classes = useStyles();\n    return (\n        <Box my={2}>\n            <Paper>\n                <Box p={1} height={150} className={classes.overflowScroll}>\n                    <Table stickyHeader size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>State</TableCell>\n                                <TableCell>Action</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {log.map(entry => (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={entry.id}>\n                                    <TableCell>{entry.currentState}</TableCell>\n                                    <TableCell>{entry.action}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Box>\n            </Paper>\n        </Box>\n    );\n};\n\nexport default LogTable;\n","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport ButtonWithSpacing from './ButtonWithSpacing';\nconst Settings = ({ children, open, handleClose }) => {\n    return (\n        <Dialog open={open} onClose={handleClose} fullScreen>\n            <DialogTitle id=\"form-dialog-title\">Einstellungen</DialogTitle>\n            <DialogContent>\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                    flexDirection=\"column\"\n                >\n                    <ButtonWithSpacing onClick={console.log}>Exportieren</ButtonWithSpacing>\n                    <ButtonWithSpacing onClick={console.log}>Fach wechseln</ButtonWithSpacing>\n                    <ButtonWithSpacing onClick={console.log}>Reset</ButtonWithSpacing>\n                </Box>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose}>Close</Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default Settings;\n","import React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport PageWrapper from './PageWrapper';\nimport ButtonGroup from './components/ButtonGroup';\nimport LogTable from './components/LogTable';\nimport Settings from './components/Settings';\n\nimport { praktiMachine } from './lib/stateMachine';\n\nlet id = 0;\n\nconst App = () => {\n    const [shouldOpenSettings, setShouldOpenSettings] = useState(false);\n    const [currentState, setNextState] = useState(praktiMachine.initial);\n    const [log, setLog] = useState(() => [\n        {\n            id: id++,\n            time: Date.now(),\n            currentState,\n            action: 'NONE',\n        },\n    ]);\n\n    const onAction = actionId => {\n        const { value: nextState } = praktiMachine.transition(currentState, actionId);\n        setLog([\n            {\n                id: id++,\n                time: Date.now(),\n                action: actionId,\n                currentState,\n                nextState,\n            },\n            ...log,\n        ]);\n        setNextState(nextState);\n    };\n\n    return (\n        <PageWrapper onOpenSettings={() => setShouldOpenSettings(true)}>\n            <Box display=\"flex\" flexDirection=\"column\" height={0.9}>\n                <ButtonGroup currentState={currentState} onAction={onAction} />\n                <LogTable log={log} />\n                <Settings\n                    open={shouldOpenSettings}\n                    handleClose={() => setShouldOpenSettings(false)}\n                />\n            </Box>\n        </PageWrapper>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function registerServiceWorker(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport './index.css';\n\nimport App from './App';\nimport { registerServiceWorker } from './lib/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}