{"version":3,"sources":["theme.js","PageWrapper.js","components/ButtonWithSpacing.js","lib/stateMachine.js","components/ButtonGroup.js","components/LogTable.js","lib/persistence.js","App.js","lib/serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","red","secondary","blue","useStyles","makeStyles","title","flexGrow","PageWrapper","children","exportData","setSubject","resetData","undo","redo","canUndo","canRedo","refreshApp","classes","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Typography","variant","className","IconButton","onClick","color","disabled","event","currentTarget","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","Box","mt","Container","maxWidth","ButtonWithSpacing","m","width","Button","size","fullWidth","actionStrings","praktiMachine","Machine","initial","states","questionFinished","on","meta","name","newQuestionAsked","teacherStartedReacting","firstStudentRaisedHand","window","prakti","root","padding","spacing","ButtonGroup","currentStateId","currentState","onAction","Paper","mb","component","display","justifyContent","alignItems","flexDirection","Object","keys","map","nextStateId","actionId","actionText","getPossibleNextActions","key","overflowScroll","overflowX","LogTable","log","my","height","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","entry","hover","role","tabIndex","action","defaultLog","time","Date","now","nextState","cache","getInitialData","result","JSON","parse","localStorage","getItem","App","Math","max","obj","currentId","setId","getNewId","setLog","addToLog","data","newLog","setUndoItems","requestAnimationFrame","setItem","stringify","undoItems","length","lastItem","slice","lastUndoItem","location","reload","confirm","removeItem","prompt","newSubject","transition","value","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f2b9d5c4.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\nimport red from '@material-ui/core/colors/red';\nimport blue from '@material-ui/core/colors/blue';\n\nexport const theme = createMuiTheme({\n    palette: {\n        primary: red,\n        secondary: blue,\n    },\n});\n","import React, { useState } from 'react';\nimport { ThemeProvider } from '@material-ui/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport RedoIcon from '@material-ui/icons/Redo';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { theme } from './theme';\n\nconst useStyles = makeStyles({\n    title: {\n        flexGrow: 1,\n    },\n});\n\nconst PageWrapper = ({\n    children,\n    exportData,\n    setSubject,\n    resetData,\n    undo,\n    redo,\n    canUndo,\n    canRedo,\n    refreshApp,\n}) => {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleMenu = event => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <AppBar position=\"fixed\">\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Prakti\n                    </Typography>\n                    <IconButton onClick={undo} color=\"inherit\" disabled={!canUndo}>\n                        <UndoIcon />\n                    </IconButton>\n                    <IconButton onClick={redo} color=\"inherit\" disabled={!canRedo}>\n                        <RedoIcon />\n                    </IconButton>\n                    <IconButton onClick={handleMenu} color=\"inherit\">\n                        <MoreVertIcon />\n                    </IconButton>\n                    <Menu\n                        id=\"menu-appbar\"\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        keepMounted\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        open={open}\n                        onClose={handleClose}\n                    >\n                        <MenuItem\n                            onClick={() => {\n                                handleClose();\n                                setSubject();\n                            }}\n                        >\n                            Fach wechseln\n                        </MenuItem>\n                        <MenuItem\n                            onClick={() => {\n                                handleClose();\n                                exportData();\n                            }}\n                        >\n                            Exportieren\n                        </MenuItem>\n                        <MenuItem\n                            onClick={() => {\n                                refreshApp();\n                            }}\n                        >\n                            App refreshen\n                        </MenuItem>\n                        <MenuItem\n                            onClick={() => {\n                                handleClose();\n                                resetData();\n                            }}\n                        >\n                            Reset\n                        </MenuItem>\n                    </Menu>\n                </Toolbar>\n            </AppBar>\n            <Box mt={9}>\n                <Container maxWidth=\"sm\">{children}</Container>\n            </Box>\n        </ThemeProvider>\n    );\n};\n\nexport default PageWrapper;\n","import React from 'react';\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\n\nconst ButtonWithSpacing = ({ children, onClick }) => (\n    <Box m={1} width={1}>\n        <Button variant=\"contained\" size=\"large\" color=\"primary\" fullWidth onClick={onClick}>\n            {children}\n        </Button>\n    </Box>\n);\n\nexport default ButtonWithSpacing;\n","import { Machine } from 'xstate';\n\nconst NEW_QUESTION_ASKED = 'NEW_QUESTION_ASKED';\nconst TEACHER_STARTED_REACTING = 'TEACHER_STARTED_REACTING';\nconst FIRST_STUDENT_RAISED_HAND = 'FIRST_STUDENT_RAISED_HAND';\nconst FIRST_STUDENT_ANSWERED_QUESTION = 'FIRST_STUDENT_ANSWERED_QUESTION';\nconst SOME_STUDENT_ANSWERED_QUESTION = 'SOME_STUDENT_ANSWERED_QUESTION';\nconst TEACHER_MOTIVATED = 'TEACHER_MOTIVATED';\nconst TEACHER_ASKED_NEW_QUESTION = 'TEACHER_POSED_NEW_QUESTION';\nconst TEACHER_SIMPLIFIED_QUESTION = 'TEACHER_SIMPLIFIED_QUESTION';\nconst TEACHER_CANCELED_QUESTION = 'TEACHER_CANCELED_QUESTION';\nconst TEACHER_ANSWERED_QUESTION = 'TEACHER_ANSWERED_QUESTION';\nconst TEACHER_REACTED_UNEXPECTEDLY = 'TEACHER_REACTED_UNEXPECTEDLY';\n\nconst actionStrings = {\n    [NEW_QUESTION_ASKED]: 'Neue Frage gestellt',\n    [TEACHER_STARTED_REACTING]: 'Lehrer reagiert',\n    [FIRST_STUDENT_RAISED_HAND]: '1. Schüler meldet sich',\n    [FIRST_STUDENT_ANSWERED_QUESTION]: '1. Schüler antwortet',\n    [SOME_STUDENT_ANSWERED_QUESTION]: 'n. Schüler antwortet, n > 1',\n    [TEACHER_MOTIVATED]: 'Motiviert Klasse',\n    [TEACHER_ASKED_NEW_QUESTION]: 'Stellt neue Frage',\n    [TEACHER_SIMPLIFIED_QUESTION]: 'Vereinfacht Frage',\n    [TEACHER_CANCELED_QUESTION]: 'Bricht ab',\n    [TEACHER_ANSWERED_QUESTION]: 'Beantwortet selbst',\n    [TEACHER_REACTED_UNEXPECTEDLY]: 'Unerwartete Reaktion',\n};\n\nexport const getPossibleNextActions = currentStateId =>\n    Object.keys(praktiMachine.states[currentStateId].on).map(nextStateId => ({\n        actionId: nextStateId,\n        actionText: actionStrings[nextStateId],\n    }));\n\nexport const getCurrentStateName = currentStateId => praktiMachine.states[currentStateId].meta.name;\n\nexport const praktiMachine = Machine({\n    id: 'prakti',\n    initial: 'questionFinished',\n    states: {\n        questionFinished: {\n            on: {\n                [NEW_QUESTION_ASKED]: 'newQuestionAsked',\n            },\n            meta: {\n                name: 'Start',\n            },\n        },\n        newQuestionAsked: {\n            on: {\n                [TEACHER_STARTED_REACTING]: 'teacherStartedReacting',\n                [FIRST_STUDENT_RAISED_HAND]: 'firstStudentRaisedHand',\n            },\n            meta: {\n                name: 'Neue Frage gestellt',\n            },\n        },\n        teacherStartedReacting: {\n            on: {\n                [TEACHER_MOTIVATED]: 'newQuestionAsked',\n                [TEACHER_ASKED_NEW_QUESTION]: 'newQuestionAsked',\n                [TEACHER_SIMPLIFIED_QUESTION]: 'newQuestionAsked',\n                [TEACHER_CANCELED_QUESTION]: 'questionFinished',\n                [TEACHER_ANSWERED_QUESTION]: 'questionFinished',\n                [TEACHER_REACTED_UNEXPECTEDLY]: 'questionFinished',\n            },\n            meta: {\n                name: 'Lehrer reagiert...',\n            },\n        },\n        firstStudentRaisedHand: {\n            on: {\n                [TEACHER_STARTED_REACTING]: 'teacherStartedReacting',\n                [FIRST_STUDENT_ANSWERED_QUESTION]: 'questionFinished',\n                [SOME_STUDENT_ANSWERED_QUESTION]: 'questionFinished',\n            },\n            meta: {\n                name: 'Schüler meldete sich',\n            },\n        },\n    },\n});\n\nwindow.prakti = praktiMachine;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\n\nimport ButtonWithSpacing from './ButtonWithSpacing';\n\nimport { getCurrentStateName, getPossibleNextActions } from '../lib/stateMachine';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n        flexGrow: 1,\n    },\n}));\n\nconst ButtonGroup = ({ currentState, onAction }) => {\n    const classes = useStyles();\n\n    return (\n        <Paper className={classes.root}>\n            <Box mb={1}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    {getCurrentStateName(currentState)}\n                </Typography>\n            </Box>\n            <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\">\n                {getPossibleNextActions(currentState).map(({ actionId, actionText }) => (\n                    <ButtonWithSpacing key={actionId} onClick={() => onAction(actionId)}>\n                        {actionText}\n                    </ButtonWithSpacing>\n                ))}\n            </Box>\n        </Paper>\n    );\n};\n\nexport default ButtonGroup;\n","import React from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Box from '@material-ui/core/Box';\n\nimport { makeStyles } from '@material-ui/styles';\n\nconst useStyles = makeStyles({\n    overflowScroll: {\n        overflowX: 'scroll',\n    },\n});\n\nconst LogTable = ({ log }) => {\n    const classes = useStyles();\n    return (\n        <Box my={2}>\n            <Paper>\n                <Box height={150} className={classes.overflowScroll}>\n                    <Table stickyHeader size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>State</TableCell>\n                                <TableCell>Action</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {log.map(entry => (\n                                <TableRow hover role=\"checkbox\" tabIndex={-1} key={entry.id}>\n                                    <TableCell>{entry.currentState}</TableCell>\n                                    <TableCell>{entry.action}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Box>\n            </Paper>\n        </Box>\n    );\n};\n\nexport default LogTable;\n","import { praktiMachine } from './stateMachine';\n\nconst id = 'LOG_STATE';\nexport function persistData(data) {\n    // don't block UI\n    window.requestAnimationFrame(() => {\n        localStorage.setItem(id, JSON.stringify(data));\n    });\n}\n\nexport const defaultLog = [\n    {\n        id: 0,\n        time: Date.now(),\n        currentState: praktiMachine.initial,\n        nextState: praktiMachine.initial,\n        action: 'NONE',\n    },\n];\n\n// this function should only be used to get the state after page refresh\n// use a cache to speed up multiple function calls\nlet cache = null;\nexport function getInitialData() {\n    if (cache) {\n        return cache;\n    }\n\n    const result = JSON.parse(localStorage.getItem(id)) || defaultLog;\n    cache = result;\n    return result;\n}\n\nexport function getPersistedDataAsString() {\n    return localStorage.getItem(id) || '[no-data-available]';\n}\n\nexport function clearPersistedData() {\n    localStorage.removeItem(id);\n}\n","import React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport PageWrapper from './PageWrapper';\nimport ButtonGroup from './components/ButtonGroup';\nimport LogTable from './components/LogTable';\n\nimport { praktiMachine } from './lib/stateMachine';\nimport {\n    persistData,\n    getInitialData,\n    clearPersistedData,\n    getPersistedDataAsString,\n    defaultLog,\n} from './lib/persistence';\n\nconst App = () => {\n    const [currentId, setId] = useState(\n        () => Math.max(0, ...getInitialData().map(obj => obj.id)) + 1,\n    );\n    const getNewId = () => {\n        const id = currentId;\n        setId(currentId + 1);\n        return id;\n    };\n\n    const [log, setLog] = useState(() => getInitialData() || defaultLog);\n    const addToLog = ({ action, currentState, nextState, meta = null }) => {\n        const newLog = [\n            {\n                id: getNewId(),\n                time: Date.now(),\n                action,\n                currentState,\n                nextState,\n                meta,\n            },\n            ...log,\n        ];\n        setLog(newLog);\n        setUndoItems([]);\n        persistData(newLog);\n    };\n\n    const [undoItems, setUndoItems] = useState([]);\n    const undo = () => {\n        const [lastItem] = log;\n        setUndoItems([lastItem, ...undoItems]);\n        setLog(log.slice(1));\n    };\n    const redo = () => {\n        const [lastUndoItem] = undoItems;\n        setLog([lastUndoItem, ...log]);\n        setUndoItems(undoItems.slice(1));\n    };\n\n    const canRedo = undoItems.length > 0;\n    const canUndo = log.length > 1;\n\n    const [{ nextState: currentState }] = log;\n\n    const onAction = actionId => {\n        const { value: nextState } = praktiMachine.transition(currentState, actionId);\n        addToLog({ action: actionId, currentState, nextState });\n    };\n\n    return (\n        <PageWrapper\n            undo={undo}\n            redo={redo}\n            canUndo={canUndo}\n            canRedo={canRedo}\n            refreshApp={() => window.location.reload()}\n            resetData={() => {\n                const shouldReset = window.confirm('Are you sure?');\n                if (!shouldReset) {\n                    return;\n                }\n\n                clearPersistedData();\n                setLog(defaultLog);\n                setId(1);\n            }}\n            exportData={() => {\n                window.prompt('Copy to clipboard:', getPersistedDataAsString());\n            }}\n            setSubject={() => {\n                const newSubject = window.prompt('Neues Fach:');\n                if (!newSubject) {\n                    return;\n                }\n\n                addToLog({\n                    action: 'NEW_SUBJECT',\n                    currentState,\n                    nextState: currentState,\n                    meta: { newSubject },\n                });\n            }}\n        >\n            <Box display=\"flex\" flexDirection=\"column\">\n                <ButtonGroup currentState={currentState} onAction={onAction} />\n                <LogTable log={log} />\n            </Box>\n        </PageWrapper>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function registerServiceWorker(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\n\nimport App from './App';\nimport { registerServiceWorker } from './lib/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}